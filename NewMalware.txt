:: Create file as .bat

@echo off
# PowerShell Script for Advanced UI
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# Function to display a message box
function Show-MessageBox {
    param (
        [string]$text,
        [string]$caption = "Message",
        [int]$buttons = [System.Windows.Forms.MessageBoxButtons]::OK,
        [int]$icon = [System.Windows.Forms.MessageBoxIcon]::Information
    )
    [System.Windows.Forms.MessageBox]::Show($text, $caption, $buttons, $icon)
}

# Show the warning message
$result = Show-MessageBox -text "WARNING: This is a prank program. It will restart your PC and simulate dangerous behavior, but it's harmless. Proceed at your own risk. Creator of this will not respond to any damages." -caption "WARNING" -buttons [System.Windows.Forms.MessageBoxButtons]::OKCancel -icon [System.Windows.Forms.MessageBoxIcon]::Warning
if ($result -ne 'OK') { exit }

# Show the password prompt
$passwordForm = New-Object Windows.Forms.Form
$passwordForm.Text = "Password Required"
$passwordForm.Size = New-Object Drawing.Size(300,150)
$passwordForm.StartPosition = "CenterScreen"

$passwordLabel = New-Object Windows.Forms.Label
$passwordLabel.Text = "Enter the password to continue:"
$passwordLabel.AutoSize = $true
$passwordLabel.Location = New-Object Drawing.Point(10,20)
$passwordForm.Controls.Add($passwordLabel)

$passwordBox = New-Object Windows.Forms.TextBox
$passwordBox.Location = New-Object Drawing.Point(10,50)
$passwordBox.Size = New-Object Drawing.Size(260,20)
$passwordBox.UseSystemPasswordChar = $true
$passwordForm.Controls.Add($passwordBox)

$okButton = New-Object Windows.Forms.Button
$okButton.Text = "OK"
$okButton.Location = New-Object Drawing.Point(10,80)
$okButton.Add_Click({ $passwordForm.DialogResult = [System.Windows.Forms.DialogResult]::OK })
$passwordForm.Controls.Add($okButton)

$result = $passwordForm.ShowDialog()
if ($result -ne [System.Windows.Forms.DialogResult]::OK -or $passwordBox.Text -ne 'mysubsarethebest') {
    Show-MessageBox -text "Incorrect password. The script will now exit." -caption "Error" -icon [System.Windows.Forms.MessageBoxIcon]::Error
    exit
}

# Send initial status update to Discord
Invoke-RestMethod -Uri 'YOUR_WEBHOOK_URL' -Method Post -Body (@{content='Script initiated. Displaying warnings.'} | ConvertTo-Json) -ContentType 'application/json'

# Show the service disable prompt
$result = Show-MessageBox -text "Disable PS/2 driver service? This will affect PS/2 keyboards and mice." -caption "Confirm" -buttons [System.Windows.Forms.MessageBoxButtons]::YesNo -icon [System.Windows.Forms.MessageBoxIcon]::Question
if ($result -eq 'Yes') {
    sc.exe config i8042prt start= disabled
    Show-MessageBox -text "PS/2 driver service disabled. Restart your computer." -caption "Service Disabled" -icon [System.Windows.Forms.MessageBoxIcon]::Information
}

# Send status update to Discord
Invoke-RestMethod -Uri 'YOUR_WEBHOOK_URL' -Method Post -Body (@{content='PS/2 driver service disabled (if approved). Prompting for restart.'} | ConvertTo-Json) -ContentType 'application/json'

# Prompt for restart
$result = Show-MessageBox -text "Restart now?" -caption "Restart" -buttons [System.Windows.Forms.MessageBoxButtons]::YesNo -icon [System.Windows.Forms.MessageBoxIcon]::Question
if ($result -eq 'Yes') {
    Invoke-RestMethod -Uri 'YOUR_WEBHOOK_URL' -Method Post -Body (@{content='Restarting computer now.'} | ConvertTo-Json) -ContentType 'application/json'
    shutdown.exe /r /t 0
} else {
    Invoke-RestMethod -Uri 'YOUR_WEBHOOK_URL' -Method Post -Body (@{content='User chose not to restart. Exiting.'} | ConvertTo-Json) -ContentType 'application/json'
    Show-MessageBox -text "Exiting script." -caption "Exit" -icon [System.Windows.Forms.MessageBoxIcon]::Information
}

